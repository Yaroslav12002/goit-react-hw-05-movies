{"version":3,"file":"static/js/298.9536f8f4.chunk.js","mappings":"oQAEaA,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACnC,OACE,4BACE,qCAAaD,MACb,uBAAIC,MAGT,EC2BD,EA/BgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,IATAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,WAAMC,GAAN,wFACIC,EAAAA,EAAAA,IAAeD,GADnB,OACjBE,EADiB,OAEvBL,EAAWK,GAFY,2CAAH,sDAKtBH,EAAiBN,EAClB,GAAE,CAACA,IAECG,EAAL,CAIA,GAA+B,IAA3BA,EAAQO,QAAQC,OAClB,OAAO,uEAGT,IAAQD,EAAYP,EAAZO,QACR,OACE,yBACGA,EAAQE,KAAI,YAA8B,IAA3Bd,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASc,EAAS,EAATA,GAC/B,OAAO,SAAChB,EAAD,CAAqBC,OAAQA,EAAQC,QAASA,GAA7Bc,EACzB,KAXJ,CAcF,C,kMC9BDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAW,mCAAG,WAAOC,EAAUC,GAAjB,gFACdV,EAAQ,GACRU,IACFV,EAAK,iBAAaU,IAHF,kBAMOH,EAAAA,EAAAA,IAAA,UAAaE,EAAb,oBAVX,oCAUW,OAA2CT,IANlD,cAMVW,EANU,yBAOTA,EAASC,MAPA,gCAShB,IAAIC,MAAM,aATM,yDAAH,wDAaJC,EAAkB,WAE7B,OAAON,EADM,sBACY,GAC1B,EAEYO,EAAmB,SAAAL,GAE9B,OAAOF,EADM,gBACYE,EAC1B,EAEYM,EAAe,SAAAV,GAC1B,IAAMW,EAAI,iBAAaX,GACvB,OAAOE,EAAYS,EACpB,EAEYC,EAAe,SAAAZ,GAC1B,IAAMW,EAAI,iBAAaX,EAAb,YACV,OAAOE,EAAYS,EACpB,EAEYhB,EAAiB,SAAAK,GAC5B,IAAMW,EAAI,iBAAaX,EAAb,YACV,OAAOE,EAAYS,EACpB,C","sources":["components/ReviewItem/ReviewItem.jsx","components/Reviews/Reviews.jsx","services/moviesAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const ReviewItem = ({ author, content }) => {\n  return (\n    <div>\n      <h2>author: {author}</h2>\n      <p>{content}</p>\n    </div>\n  );\n};\n\nReviewItem.propTypes = {\n  author: PropTypes.string,\n  content: PropTypes.string,\n};\n","import { useParams } from 'react-router-dom';\nimport { getMovieReview } from 'services/moviesAPI';\nimport { useState, useEffect } from 'react';\nimport { ReviewItem } from 'components/ReviewItem/ReviewItem';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    const loadMovieReviews = async query => {\n      const responseData = await getMovieReview(query);\n      setReviews(responseData);\n    };\n\n    loadMovieReviews(movieId);\n  }, [movieId]);\n\n  if (!reviews) {\n    return;\n  }\n\n  if (reviews.results.length === 0) {\n    return <div>We don't have any reviews for this movie.</div>;\n  }\n\n  const { results } = reviews;\n  return (\n    <div>\n      {results.map(({ author, content, id }) => {\n        return <ReviewItem key={id} author={author} content={content} />;\n      })}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'b2b9595202d4f988a1c6d3c8319aadf9';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst fetchMovies = async (endpoint, param) => {\n  let query = '';\n  if (param) {\n    query = `&query=${param}`;\n  }\n  try {\n    const response = await axios.get(`${endpoint}?api_key=${API_KEY}${query}`);\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n};\n\nexport const getMoviesTrends = () => {\n  const path = '/trending/movie/day';\n  return fetchMovies(path, '');\n};\n\nexport const getMoviesByQuery = param => {\n  const path = '/search/movie';\n  return fetchMovies(path, param);\n};\n\nexport const getMovieById = id => {\n  const path = `/movie/${id}`;\n  return fetchMovies(path);\n};\n\nexport const getMovieCast = id => {\n  const path = `/movie/${id}/credits`;\n  return fetchMovies(path);\n};\n\nexport const getMovieReview = id => {\n  const path = `/movie/${id}/reviews`;\n  return fetchMovies(path);\n};\n\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n"],"names":["ReviewItem","author","content","movieId","useParams","useState","reviews","setReviews","useEffect","loadMovieReviews","query","getMovieReview","responseData","results","length","map","id","axios","fetchMovies","endpoint","param","response","data","Error","getMoviesTrends","getMoviesByQuery","getMovieById","path","getMovieCast"],"sourceRoot":""}