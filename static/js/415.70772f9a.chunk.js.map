{"version":3,"file":"static/js/415.70772f9a.chunk.js","mappings":"8MAGaA,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,2N,SCARE,EAAiB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACtC,OACE,SAACL,EAAD,CAAUM,GAAE,kBAAaF,EAAMG,IAAMF,MAAOA,EAA5C,SACGD,EAAMI,OAGZ,ECPYC,EAAoBR,EAAAA,GAAAA,IAAH,4CAIjBS,EAAYT,EAAAA,GAAAA,IAAH,sBCFTU,EAAa,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,WAAYP,EAAY,EAAZA,MACvC,GAAKO,EAKL,OACE,+BACE,SAACH,EAAD,WACE,SAACC,EAAD,UACGE,EAAWC,KAAI,SAAAT,GACd,OACE,SAACD,EAAD,CAA+BC,MAAOA,EAAOC,MAAOA,GAA/BD,EAAMG,GAE9B,SAKV,C,mICID,UArBa,WACX,OAAwCO,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRC,GACD,GAAE,IAEH,IAAMA,EAAgB,mCAAG,qGACIC,EAAAA,EAAAA,MADJ,OACjBC,EADiB,OAEvBN,GAAgBO,EAAAA,EAAAA,GAAsBD,EAAaE,UAF5B,2CAAH,qDAKtB,OACE,iCACE,4CACA,SAAC,IAAD,CAAYZ,WAAYG,EAAcV,MAAO,CAAEoB,KAAMR,OAG1D,C,kMCrBDS,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAW,mCAAG,WAAOC,EAAUC,GAAjB,gFACdC,EAAQ,GACRD,IACFC,EAAK,iBAAaD,IAHF,kBAMOH,EAAAA,EAAAA,IAAA,UAAaE,EAAb,oBAVX,oCAUW,OAA2CE,IANlD,cAMVC,EANU,yBAOTA,EAASC,MAPA,gCAShB,IAAIC,MAAM,aATM,yDAAH,wDAaJZ,EAAkB,WAE7B,OAAOM,EADM,sBACY,GAC1B,EAEYO,EAAmB,SAAAL,GAE9B,OAAOF,EADM,gBACYE,EAC1B,EAEYM,EAAe,SAAA5B,GAC1B,IAAM6B,EAAI,iBAAa7B,GACvB,OAAOoB,EAAYS,EACpB,EAEYC,EAAe,SAAA9B,GAC1B,IAAM6B,EAAI,iBAAa7B,EAAb,YACV,OAAOoB,EAAYS,EACpB,EAEYE,EAAiB,SAAA/B,GAC5B,IAAM6B,EAAI,iBAAa7B,EAAb,YACV,OAAOoB,EAAYS,EACpB,C,uDC1CM,IAAMb,EAAwB,SAAAgB,GAInC,OAHwBA,EAAO1B,KAAI,YACjC,MAAO,CAAEN,GADkE,EAAvCA,GACvBC,MAD8D,EAAnCA,MACpBgC,YADuD,EAA5BA,YACdC,SAD0C,EAAfA,SAE7D,GAEF,C","sources":["components/MoviesListItem/MoviesListItem.styled.js","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviestList.jsx","pages/Home.jsx","services/moviesAPI.js","services/truncMovieProperties.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const ItemLink = styled(NavLink)`\n  display: block;\n  width: 50%;\n  margin-right: auto;\n  padding: 5px 5px;\n  text-decoration: none;\n  border-radius: 4px;\n  &:hover {\n    color: white;\n    background-color: orange;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ItemLink } from './MoviesListItem.styled';\n\nexport const MoviesListItem = ({ movie, state }) => {\n  return (\n    <ItemLink to={`/movies/${movie.id}`} state={state}>\n      {movie.title}\n    </ItemLink>\n  );\n};\n\nMoviesListItem.propTypes = {\n  movie: PropTypes.exact({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    overview: PropTypes.string.isRequired,\n  }),\n  state: PropTypes.object,\n};\n","import styled from 'styled-components';\n\nexport const MoviesListSection = styled.div`\n  padding: 0 20px;\n`;\n\nexport const MovieList = styled.nav``;\n","import PropTypes from 'prop-types';\nimport { MoviesListItem } from 'components/MoviesListItem/MoviesListItem';\nimport { MoviesListSection, MovieList } from './MoviesList.styled';\n\nexport const MoviesList = ({ moviesList, state }) => {\n  if (!moviesList) {\n    return;\n  }\n  // console.log(moviesList);\n\n  return (\n    <>\n      <MoviesListSection>\n        <MovieList>\n          {moviesList.map(movie => {\n            return (\n              <MoviesListItem key={movie.id} movie={movie} state={state} />\n            );\n          })}\n        </MovieList>\n      </MoviesListSection>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  moviesList: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      overview: PropTypes.string.isRequired,\n    })\n  ),\n  state: PropTypes.object,\n};\n","import { MoviesList } from 'components/MoviesList/MoviestList';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getMoviesTrends } from 'services/moviesAPI';\nimport { truncMoviesProperties } from 'services/truncMovieProperties';\n\nconst Home = () => {\n  const [moviesTrends, setmoviesTrends] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    loadMoviesTrends();\n  }, []);\n\n  const loadMoviesTrends = async () => {\n    const responseData = await getMoviesTrends();\n    setmoviesTrends(truncMoviesProperties(responseData.results));\n  };\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      <MoviesList moviesList={moviesTrends} state={{ from: location }} />\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = 'b2b9595202d4f988a1c6d3c8319aadf9';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst fetchMovies = async (endpoint, param) => {\n  let query = '';\n  if (param) {\n    query = `&query=${param}`;\n  }\n  try {\n    const response = await axios.get(`${endpoint}?api_key=${API_KEY}${query}`);\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n};\n\nexport const getMoviesTrends = () => {\n  const path = '/trending/movie/day';\n  return fetchMovies(path, '');\n};\n\nexport const getMoviesByQuery = param => {\n  const path = '/search/movie';\n  return fetchMovies(path, param);\n};\n\nexport const getMovieById = id => {\n  const path = `/movie/${id}`;\n  return fetchMovies(path);\n};\n\nexport const getMovieCast = id => {\n  const path = `/movie/${id}/credits`;\n  return fetchMovies(path);\n};\n\nexport const getMovieReview = id => {\n  const path = `/movie/${id}/reviews`;\n  return fetchMovies(path);\n};\n\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n","export const truncMoviesProperties = movies => {\n  const truncatedMovies = movies.map(({ id, title, poster_path, overview }) => {\n    return { id, title, poster_path, overview };\n  });\n  return truncatedMovies;\n};\n"],"names":["ItemLink","styled","NavLink","MoviesListItem","movie","state","to","id","title","MoviesListSection","MovieList","MoviesList","moviesList","map","useState","moviesTrends","setmoviesTrends","location","useLocation","useEffect","loadMoviesTrends","getMoviesTrends","responseData","truncMoviesProperties","results","from","axios","fetchMovies","endpoint","param","query","response","data","Error","getMoviesByQuery","getMovieById","path","getMovieCast","getMovieReview","movies","poster_path","overview"],"sourceRoot":""}